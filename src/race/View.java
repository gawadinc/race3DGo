package race;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.TooManyListenersException;

import javax.imageio.ImageIO;

import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;

/**
 *
 * @author leo
 */
public class View extends javax.swing.JFrame implements MouseMotionListener {

    private BufferStrategy bs;
    private Graphics2D g;
    private BufferedImage background;
    private BufferedImage tree;
    private BufferedImage tree2;
    private BufferedImage car;
    
    
    MainLoop maLoop; 
  //for containing the ports that will be found
    private Enumeration ports = null;
    //map the port names to CommPortIdentifiers
    private HashMap portMap = new HashMap();

    //this is the object that contains the opened port
    private CommPortIdentifier selectedPortIdentifier = null;
    private SerialPort serialPort = null;

    //input and output streams for sending and receiving data
    private InputStream input = null;
    private OutputStream output = null;
    
    //the timeout value for connecting with the port
    final static int TIMEOUT = 2000;

    private boolean bConnected = false;
    
    StringBuffer data = new StringBuffer();
    
    final static int NEW_LINE_ASCII = 10;


    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        setSize(800, 600);
        setLocationRelativeTo(null);
        
        createBufferStrategy(3);
        bs = getBufferStrategy();
        g = (Graphics2D) bs.getDrawGraphics();

        maLoop = new MainLoop();
        try {
            URL urlImg=getClass().getResource("/test/background.png");
            background = ImageIO.read(urlImg);
            
            urlImg=getClass().getResource("/test/tree.png");
            tree = ImageIO.read(urlImg);

            urlImg=getClass().getResource("/test/tree2.png");
            tree2 = ImageIO.read(urlImg);

            urlImg=getClass().getResource("/test/car.png");
            car = ImageIO.read(urlImg);
        }
        catch (Exception e) { }
        
        Thread mainLoop = new Thread(maLoop);
        mainLoop.start();
        
        addMouseMotionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    	
    	
    	
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	
                View view = new View();
                view.setVisible(true);
                view.searchForPorts();
                view.connect();
                view.initListener();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void searchForPorts()
    {
        ports = CommPortIdentifier.getPortIdentifiers();

        while (ports.hasMoreElements())
        {
            CommPortIdentifier curPort = (CommPortIdentifier)ports.nextElement();

            //get only serial ports
            if (curPort.getPortType() == CommPortIdentifier.PORT_SERIAL)
            {
                portMap.put(curPort.getName(), curPort);
            }
        }
    }
    
    public void connect()
    {

        selectedPortIdentifier = (CommPortIdentifier)portMap.get("COM3");

        CommPort commPort = null;

        try
        {
            //the method below returns an object of type CommPort
            commPort = selectedPortIdentifier.open("TigerControlPanel", TIMEOUT);
            //the CommPort object can be casted to a SerialPort object
            serialPort = (SerialPort)commPort;

            //for controlling GUI elements
            setConnected(true);

        }
        catch (PortInUseException e)
        {
        	e.printStackTrace();
        }
        catch (Exception e)
        {
        	e.printStackTrace();
        }
    }
    
    public void initListener()
    {
        try {
			serialPort.addEventListener(maLoop);
		} catch (TooManyListenersException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        serialPort.notifyOnDataAvailable(true);

        	try {
				input = serialPort.getInputStream();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
            
    }

    
    public void setConnected(boolean bConnected)
    {
        this.bConnected = bConnected;
    }
    



    private class MainLoop implements Runnable, SerialPortEventListener {
    	
        @Override
        public void run() {
            while (true) {
                g = (Graphics2D) bs.getDrawGraphics();
                update();
                draw(g);
                bs.show();
                g.dispose();
                try {
                	
					Thread.sleep(Math.abs(Math.round(Math.abs(speed)*100 - 205)));
					//System.out.println(speed);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        }

        
        
        public void serialEvent(SerialPortEvent evt) {
            if (evt.getEventType() == SerialPortEvent.DATA_AVAILABLE)
            {
                try
                {
                    byte singleData = (byte)input.read();

                    if (singleData != NEW_LINE_ASCII)
                    {
                        String logText = new String(new byte[] {singleData});
                        data.append(logText);
                        
                    }
                    else
                    {
                    	try{
                    		speed = Double.parseDouble(data.toString());
                    		data = new StringBuffer();
                    	}catch(NumberFormatException e){
                    		
                    	}
                        //System.out.println(speed);
                    }
                }
                catch (Exception e)
                {
                	e.printStackTrace();
                }
            }
        }

    }
    double speed;
    int track = 0;
    double a = 0;
    double cf = 0;
    double ha = 0;
    double backgroundx=0;
    

    
    public void update() {
        a += 0.15d;
        if (a>=1) {
            a=0;
            track++;
        }
        //cf += 0.05d;
        //if (cf > 10) {
        //    cf = 10;
        //}
        
        backgroundx=backgroundx+(cf * 0.03);
        
        ha = 0.5d;
        if (ha >= 0) {
            ha = 0;
        }
    }

    public void draw(Graphics2D g) {
        //g.setBackground(Color.BLUE);
        //g.clearRect(0, 0, getWidth(), getHeight());
        g.scale(2, 2.2);
        g.drawImage(background, (int) -backgroundx, 0, this);
        
        g.scale(0.5, 1/2.2);
        g.translate(getWidth() / 2, getHeight() / 2);
        
        Point previous = null;
        int previousCurve = 0;
        for (int z = 159; z > 0; z--) {
            int x = (int) (1200 / (z - a));
            int y = (int) ((500 - (z - a) * ha) / (z - a));
            int curva = (int) ((z - a) * cf);
            //g.setColor(Color.RED);
            //g.fillOval(x + curva, y, 5, 5);
            //g.fillOval(-x + curva, y, 5, 5);
            //g.drawLine(-x + curva, y, x + curva, y);
            if (previous == null) {
                previous = new Point(x, y);
            }
            else {
                Polygon poly = new Polygon();
                poly.addPoint(-previous.x + previousCurve, previous.y);
                poly.addPoint(previous.x + previousCurve, previous.y);
                poly.addPoint(x + curva, y);
                poly.addPoint(-x + curva, y);
                
                if ((z+track) % 2 == 0) {
                    g.setColor(new Color(0, 110, 0));
                }
                else {
                    g.setColor(new Color(0, 120, 0));
                }
                g.fillRect(-getWidth()/2, previous.y, getWidth(), y-previous.y);
                
                if ((z+track) % 2 == 0) {
                    g.setColor(new Color(140, 140, 140));
                }
                else {
                    g.setColor(new Color(160, 160, 160));
                }
                g.fillPolygon(poly);
                previous.setLocation(x, y);
                
                if ((z+track) % 13 == 0) {
                    int xtree = (int) (1300 / (z - a)); 
                    int widthTree = (int) (tree.getWidth() / (z-a) * 12);
                    int heightTree = (int) (tree.getHeight() / (z-a) * 12);
                    g.drawImage(tree, xtree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                    g.drawImage(tree, - xtree - widthTree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                }

                if ((z+track) % 15 == 1) {
                    int xtree = (int) (4000 / (z - a)); 
                    int widthTree = (int) (tree.getWidth() / (z-a) * 6);
                    int heightTree = (int) (tree.getHeight() / (z-a) * 6);
                    g.drawImage(tree2, xtree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                    g.drawImage(tree2, - xtree - widthTree + curva, (int) previous.y - heightTree, widthTree, heightTree, this);
                }
            }
            previousCurve = curva;
        }

        g.drawImage(car, -200, 150+(int)(Math.random()*3)-1, car.getWidth()*4, car.getHeight()*4, this);
        
        g.setColor(Color.BLUE);
        g.drawString("Track: "+track, 50-getWidth()/2, 50-getHeight()/2);
    }


    @Override
    protected void processKeyEvent(KeyEvent ke) {
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        cf = 20 * ( (e.getX()-getWidth()/2.0) / (getWidth()/2.0));
    }    
    
}
